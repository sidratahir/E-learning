Tree-Structured Indexes

Werner Nutt
Introduction to Database Systems Free University of Bozen-Bolzano

Introduction
2

? As for any index, three alternatives for data entries K ? :

? Data record with key value K ? K, r , where r is rid of a record with search key value K ? K, [r1 , . . . , rn ] , where [r1 , . . . , rn ] is a list or rid?s of records with search key value K

.

? Choice orthogonal to indexing technique used to locate entries K ? . ? Tree-structured indexing techniques support both range searches and equality searches. ? ISAM: static structure; B+-tree: dynamic, adjusts gracefully under inserts and deletes.

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

Range Searches
3

? ?Find all employees with sal > 1500? ? If data is in sorted ?le, do binary search to ?nd ?rst such employee, then scan to ?nd others ? Cost of binary search can be quite high ? Simple idea: create an ?index? ?le
k1 k2 kN

Index File

Page 1 Page 2

Page 3 Page N

Data File

; can do binary search on (smaller) index ?le!

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

ISAM (= Indexed Sequential Access Method)
4
index entry
P 0 1 1 P K2 P 2 K K m Pm

Index ?le may still be quite large. But we can apply the idea repeatedly!

Index Pages

Leaf Pages

Overflow page

Primary pages

; Leaf pages contain data entries
Introduction to Databases Werner Nutt Free University of Bozen-Bolzano

Comments on ISAM
5

File creation: Leaf (data) pages allocated sequentially, sorted by search key; then index pages allocated, then space for over?ow pages. Index entries: search key value, page id ; ?direct? search for data entries, which are in leaf pages Search: Start at root; use key comparisons to go to leaf. Cost ? logF N where F = # entries/index page (?fanout?) and N = # leaf pages Insert: Find leaf data that entry belongs to, and put it there Delete: Find leaf and remove from leaf; if empty over?ow page, de-allocate ; Static tree structure: inserts/deletes a?ect only leaf pages

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

Example ISAM Tree
6

Each node can hold 2 entries No need for ?next-leaf-page? pointers (Why?)

Root
40

20

33

51

63

10*

15*

20*

27*

33* 37*

40* 46*

51*

55*

63*

97*

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

7

After Inserting 23? , 48? , 41? , 42? , . . .

Root Index Pages
40

20

33

51

63

Primary Leaf
10* 63* 15* 20* 27* 33* 37* 40* 46* 51* 97* 55*

Pages

Overflow
23*

48* 41*

Pages
42*

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

8

Then Deleting 42? , 51? , 97?

Root
40

20

33

51

63

10*

15*

20*

27*

33* 37*

40* 46*

55*

63*

23*

48* 41*

Note that 51? appears in index levels, but not in leaf!

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

B+-Tree: The Most Widely Used Index
9

? Insert/delete at logF N cost (F = ?fan out? and N = # leaf pages); keep tree height-balanced. ? Minimum 50% occupancy (except for root). ? Each node contains d ? m ? 2d entries (d is the order of the tree). ? Supports equality and range-searches e?ciently.

Index (Directs search)

Data Entries ("Sequence set")

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

Example B+-Tree
10

? Search begins at root, and key comparisons direct it to a leaf (as in ISAM) ? Search for 5? , 15? , all data entries with key ? 24?
Root

13

17

24

30

2*

3*

5*

7*

14* 16*

19* 20* 22*

24* 27* 29*

33* 34* 38* 39*

; Based on the search for 15? , we know it is not in the tree!

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

B+-Trees in Numbers
11

? Average ?ll-factor: 66% (= ln 2) ? Typical order: 100 ? average fanout = 133 ? Typical capacities: ? Height 4: 133 4 = 312,900,700 records ? Height 3: 133 3 = 2,352,637 records ? Can often hold top levels in bu?er pool: ? Level 1 = 1 page = 8 KBytes ? Level 2 = 133 pages = 1 MByte ? Level 3 = 17,689 pages = 133 MBytes

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

Inserting a Data Entry into a B+-Tree
12

? Find correct leaf L ? Put data entry onto L ? If L has enough space, done! ? Else, must split L (into L and a new node L )
? Redistribute entries evenly, copy up middle key ? Insert index entry pointing to L into parent of L

? This can happen recursively ? To split index note, redistribute entries evenly, but push up middle key (contrast with leaf splits!) ? Splits ?grow? three; root split increases height ? Tree growth: gets wider or one level taller at top

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

13

Inserting 8? into Example B+-Tree
? Observe how minimum occupancy is guaranteed in both leaf and index page splits.
5 Entry to be inserted in parent node. (Note that 5 is copied up and continues to appear in the leaf.)
2* 8* 3* 7* 5*

? Note di?erence between copy up and push up! What?s the reason?
17

Entry to be inserted in parent node. (Note that 17 is pushed up and and appears once in the index. Contrast this with a leaf split.)

5

13

24

30

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

. . . After Inserting 8?
14

Root
17

5

13

24

30

2* 5* 7*

3*

8*

14* 16*

19* 20* 22*

24* 27* 29*

33* 34* 38* 39*

? Notice that root was split, leading to increase in height ? In this example, we can avoid split be re-distributing entries; however, this is usually not done in practice

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

Deleting a Data Entry from a B+-Tree
15

? Start at root, ?nd leaf L where entry belongs ? Remove the entry ? If L is at least half-full, done! ? If L has only d ? 1 entries , ? Try to re-distribute , borrowing from sibling
(adjacent node with same parent as L)

? If re-distribution fails, merge L and sibling ? If merge occurred, must delete entry (pointing to L or sibling) from parent of L ? Merge could propagate to root, decreasing height

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

. . . after (Inserting 8? , then) Deleting 19? and 20?
16

Root
17

5

13

27

30

2* 5* 7* 8*

3*

14* 16*

22* 24*

27* 29*

33* 34* 38* 39*

? Deleting 19 ? is easy ? Deleting 20 ? is done with re-distribution. Notice how middle key is copied up!

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

. . . and then Deleting 24?
17

? Must merge ? observe ?toss? of index entry (on right), and ?pull down? of index entry (below)
22* 27* 29* 33* 34* 38* 39* 30

Root
5 17 30 13

2* 14* 16*

3* 5* 7* 8* 22* 27* 29*

33* 34* 38* 39*

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

Example of Non-leaf Re-distribution
18

? Tree is shown below during deletion of 24 ? (What could be a possible tree?) ? In contrast to previous example, can re-distribute entry form left child of root to right child

Root

22

5

13

17

20

30

2*

3*

5*

7*

8*

14* 16*

17* 18*

20* 21*

22* 27* 29*

33* 34* 38* 39*

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

After Re-distribution
19

? Intuitively, entries are re-distributed by ?pushing through? the splitting entry in the parent node ? It su?ces to re-distribute index entry with key 20; (we have re-distributed 17 as well for illustration)

Root
17

5 20

13

22

30

2* 5* 14* 16* 17* 18* 20* 21* 22* 27* 29* 7* 8* 33* 34* 38* 39*

3*

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

Bulk Loading of a B+-Tree
20

? If we have a large collection of records, and we want to create a B+-tree on some ?led, doing so by repeatedly inserting records is very slow ? Bulk loading can be done much more e?ciently ? Initialisation: Sort all data entries, insert pointer to ?rst (leaf) page in a new (root) page

Root

Sorted pages of data entries; not yet in B+ tree

3* 4*

6* 9*

10* 11*

12* 13*

20* 22*

23* 31* 35* 36*

38* 41* 44*

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

Bulk Loading of a B+-Tree (Cntd.)
21

Root
6 10

Data entry pages not yet in B+ tree

3* 4* 20* 22*

6* 9*

10* 11*

12* 13*

23* 31* 35* 36*

38* 41* 44*

Root
10

6 12

Data entry pages not yet in B+ tree

3* 4* 20* 22*

6* 9*

10* 11*

12* 13*

23* 31* 35* 36*

38* 41* 44*

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

Bulk Loading of a B+-Tree (Cntd.)
22

? Index entries for leaf pages always entered into right-most index page just above leaf level. When this ?lls up, it splits. (Split may go up right-most path to the root) ? Much faster than repeated inserts, especially when one considers locking!

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

Bulk Loading of a B+-Tree (Cntd.)
23
Root
10 20

Data entry pages
6 12 23 35

not yet in B+ tree

3* 4* 20* 22*

6* 9*

10* 11*

12* 13*

23* 31* 35* 36*

38* 41* 44*

Root
20

10 35

Data entry pages not yet in B+ tree

6 12 38

23

3* 4* 20* 22*

6* 9*

10* 11*

12* 13*

23* 31* 35* 36*

38* 41* 44*

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

Summary of Bulk Loading
24

? Option 1: multiple inserts ? Slow ? Does not give sequential storage of leaves ? Option 2: Bulk Loading ? Has advantages for concurrency control ? Fewer I/O?s during build ? Leaves will be stored sequentially (and linked, of course) ? Can control ??ll factor? on pages

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

Storage and Access Cost for an Average B+-tree
25

Example: Relation Orders with attribute Orders.CustId Assumptions: Page Size: 4KBytes (including 96 Bytes page header) Occupancy of Page: 70 % Number of records in Orders: 10,000,000 Number of distinct Customer ID?s: 100,000 (for every customer, there is an equal number of orders) Length of a Customer ID: 24 Bytes Length of an rid: 6 Bytes Length of a pointer in B+-tree: 6 Bytes

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

We Conclude:
26

Length of Rid List: 24 + 100 ? 6 Bytes = 624 Bytes Number of Rid Lists on an Index Page: Number of Index Pages: .7 ? (4096 ? 96)/624 = 4 100, 000/4 = 25, 000

Length of a ?Signpost? to a Non-leaf Node: 24 + 6 Bytes = 30 Bytes Fanout: Height of Index: .7 ? (4096 ? 96)/30 = 93 log93 25, 000 + 1 = 4 (3 Levels for non-leaf nodes plus leaf level)

Number of Pages in Index: 25, 000 pages on Level 4, 25, 000/93 = 269 non-leaf nodes on Level 3 269/93 = 3 non-leaf nodes on Level 2 plus 1 root node Storage Space: 25, 270 ? 4 KBytes ? 100 MBytes ; Reading all orders for a CustId requires 4 + 100 = 104 page accesses

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

Tree-structured Indexes: Summary
27

? Ideal for range-searches, also good for equality searches ? ISAM is a static structure ? Only leaf pages modi?ed; over?ow pages needed ? Over?ow chains can degrade performance unless size of data set and data distribution stay constant ? B+-tree is a dynamic structure ? Inserts/deletes leave tree height-balanced (logF N cost) ? High fanout F means depth rarely more than 3 or 4 ? Almost always better than maintaining a sorted ?le ? Typically, 66% (= ln 2) occupancy on average ? If data entries are data records, splits can change rids!

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

Tree-structured Indexes: Summary
28

? Bulk loading can be much faster than repeated inserts for creating a B+-tree on a large data set ? Most widely used index in database management systems because of its versatility. On of the most optimized components of a DBMS.

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

References
29

These slides are based on Chapter 10 of the book Database Management Systems by R. Ramakrishnan and J. Gehrke, and on slides by the authors published at
www.cs.wisc.edu/~dbbook/openAccess/thirdEdition/slides/slides3ed.html

Introduction to Databases

Werner Nutt

Free University of Bozen-Bolzano

